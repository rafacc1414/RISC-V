library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all; 

--we define the entity with two 32-bit vectors 
entity Instruction_Memory is
    Port ( dir : in  STD_LOGIC_VECTOR (31 downto 0);
           instr : out  STD_LOGIC_VECTOR (31 downto 0));
end Instruction_Memory;

--we define de architecture type behavioral, introducing de memory like a array
architecture Behavioral of Instruction_Memory is
	type mem is array(0 to 511) of std_logic_vector(7 downto 0);
	constant code : mem:=(
  --I have put the numbers that are related to the instruction memory according to the table that Juanmi passed in discord
    x"0000000",x"0100000",x"0000000",x"0000000",x"0000000",x"0000000",x"0000000",x"0100000",x"000000",x"000000",
    x"000",x"000",x"001",x"010",x"011",x"100",x"101",x"101",x"110",x"111", 
    x"0110011",x"0110011",x"0110011",x"0110011",x"0110011",x"0110011",x"0110011",x"0110011",x"0110011",x"0110011",
    
	others=> x"00");

begin

	process(dir)
	begin
  -- I look at the division of bits and indicate it in the processes
      instr(19 downto 15)<=code(conv_integer(dir));
      instr(24 downto 20)<=code(conv_integer(dir)+1);
      instr(11 downto 7)<= code(conv_integer(dir)+2);
      instr(14 downto 12)<=code(conv_integer(dir)+3);
	end process;
	
end Behavioral;
